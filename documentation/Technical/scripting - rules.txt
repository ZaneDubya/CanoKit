// === Rule System Documentation and Example =========================================================================
// ===================================================================================================================

//  This is an example script file that also documents the rule system syntax.
//  Responses are fired by "triggers" given specific "contexts".
//  The syntax for a rule system script is:
//  //                      Comment. The remainder of the line should not be parsed.
//  include "filename"      The contents of the file are added when parsing.
//  emumeration ...         Defines an enumeration allowing comparison against enumerated keys.
//  criterion ...   		Defines a match condition
//  response ...            Either one response or a sequence of responses.
//  rule ...                Defines one or more criteria and a response to those criteria.
//  
//  During run time, when a trigger event occurs, the rule system is presented with the named
//  trigger and a context (set of key value pairs) which defines the game state. The rule system
//  checks each rule against the context to see which rule best matches the context, if any.
//  To do so, each rule that responds to the trigger is scored as follows: 0 points for each
//  criteria that does not match the context, and criteria weight * context keyvalue weight if
//  the criteria does match. There is also an option to require a match for a criteria.
//  The rule with the highest score is then selected, and the rule system attempts to look up a
//  response from the rule's response definitions.


// === Note on case sensitivity ======================================================================================
// ===================================================================================================================

// Names in the rule system and context collection are case sensitive.
// String values are case sensitive.

// === Enumerations ==================================================================================================
// ===================================================================================================================
// This is an enumeration. Reference an enumeration value as two identifiers with dot separator,
// e.g. EnumerationName.KeyName


emumeration DialogueType {
    Sign    0
}

// === Criteria ======================================================================================================
// ===================================================================================================================

// A criteria is an expression that is checked against the context of the world.
// 	Format:
//		criterion criterionname contextkey operator contextvalue [weight value] [required]
//	Descriptions:
//		criterionname		The unique name of the criteria.
//		contextkey			The context variable that will be checked.
//		operator			The comparison type. Any of:
//							= (equals), != (does not equal),
//							< (less than), <= (less than or equal),
//							> (greater than), >= (greater than or equal),
//		contextvalue		The value of the context variable. Can be:
//							Numeric, floating point: 0 or 0.000
//							Boolean: false or true (equivalent internally to 0 or any other value)
//							Enumeration: EnumerationName.KeyName, equates to numeric value of enumeration.
//							String:	"value", case sensitive.
//		weight				Optional. A criteria match is by default worth 1.0 points. You may increase or decrease the value.
//		required			Optional. If this is set, the criterion must be matched. Otherwise if not matched it does not effect the score.


criterion IsPlayer 		Actor = player required
criterion IsRich		Gold>=500 2.0
criterion IsNamedBob	Name="Bob"
criterion WonGame		Winner =   true


// === Responses =====================================================================================================
// ===================================================================================================================

// A response is an event or set of events, one of which will be selected if the rule matches.
// Single response format:
//      response responsename responsetype responseparam [once | repeatafter value] [then target conceptname contexts]
// Response set format:
//      response responsename [permitrepeats] [ordered] [once] {
//          responsetype responseparam [once | repeatafter value] [weight value] [orderfirst | orderlast] [then target conceptname contexts]
//          responsetype responseparam [once | repeatafter value] [weight value] [orderfirst | orderlast] [then target conceptname contexts]
//          ...
//      }
//  Descriptions:
//		responsename		The unique name of the response group.
//      permitrepeats       Optional. Allows repeated responses before all are selected once.
//                          By default all responses must be selected once before any repeat.
//      ordered             Optional. Select responses in order. By default responses in a set are selected randomly.
//      responsetype        An identifier. One of:
//          speak           responseparam is a key to text_%%.txt. Show as speech with portrait.
//          sign            responseparam is a key to text_%%.txt. Show as sign post.
//          print           responseparam is a key to text_%%.txt. Show as text on screen.
//          scene           responseparam is filename in the data/scenes folder.
//			script			responseparam is a lox script.
//		once				Optional. For single responses, response will only be shown once in the entire game.
//							For response sets, Once all responses have been selected disable the response set.\
//							Once will not work for sets with the permitrepeats option.
//		repeatafter			Optional. response will be disabled for value seconds.
//		weight				Optional. By default responses are selected randomly as if all weights are 100. You can
//							make a response less frequent by setting weight < 100 and more likely with weight > 100.
//							This is overridden by ordered orderfirst and orderlast.
//		orderfirst			Optional. This response will always occur first unless the response is disabled.
//		orderlast			Optional. This response will always occur last unless the response is disabled.
// 		then				Optional. Another concept fires after the response. Used to make characters respond to eachother.
//							target is the defined ingame name of the target.
//							conceptname will be the named concept dispatched to the target.
//							contexts are a list of variables added to the dispatched concept.
//							Format is key:value where key is the context name and value is numeric boolean enumeration or string.

response ShowSign1 

response ShowSign2 {
	
}


// === Rules =========================================================================================================
// ===================================================================================================================

// A rule is a set of one or more criteria, and a response that will be fired if the rule is selected based the context.
// Format:
// 		rule rulename [once] {
//			trigger triggerName
//			criteria [...]
//			response [...]
// 		}
// Descriptions:
//		once		The name of the rule.  Required. Not used by the rule system but included in debug logs.
//		matchonce	Optional. If present, the rule will be disabled after a match.
//		criteria	Followed by a list of defined criterion.
//		response	Followed by a single response, defined by responsename, or one unnamed single response, or one unnamed response set.





rule {
    trigger     EnterLocation
    criteria    IsPlayer Map=0000 required Location=2 required SeenSign=0 required
    response    
}


